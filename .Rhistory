library(devtools)
library(roxygen2)
library(TBASS)
devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 500
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE, ticker = 50)
##------ Tue Aug 25 11:46:42 2020 ------##
##------ Tue Aug 25 11:46:44 2020 ------##
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 500
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE, ticker = 50)
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 500
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE, ticker = 50)
library(TBASS)
set.seed(12)
nmcmc <- 500
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE, ticker = 50)
##------ Tue Aug 25 11:48:35 2020 ------##
##------ Tue Aug 25 11:48:36 2020 ------##
##------ Tue Aug 25 11:48:38 2020 ------##
##------ Tue Aug 25 11:48:39 2020 ------##
##------ Tue Aug 25 11:48:41 2020 ------##
##------ Tue Aug 25 11:48:42 2020 ------##
##------ Tue Aug 25 11:48:44 2020 ------##
##------ Tue Aug 25 11:48:45 2020 ------##
##------ Tue Aug 25 11:48:47 2020 ------##
##------ Tue Aug 25 11:48:48 2020 ------##
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(tb$s2[-burn],type="l")
matplot(tb$v[-burn,],type="l")
tail(tb$s2)
# devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 500
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE, ticker = 50)
##------ Tue Aug 25 11:49:55 2020 ------##
roxygen2::roxygenise()
getwd()
setwd("/Users/andyshen/Desktop/Git/TBASS/TBASS")
roxygen2::roxygenise()
?tbass
# devtools::install_github("aashen12/TBASS")
# setwd("/Users/andyshen/Desktop/Git/TBASS/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
# devtools::install_github("aashen12/TBASS")
# setwd("/Users/andyshen/Desktop/Git/TBASS/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 5000
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE, ticker = 500)
##------ Tue Aug 25 11:52:31 2020 ------##
devtools::install_github("aashen12/TBASS")
# devtools::install_github("aashen12/TBASS")
# setwd("/Users/andyshen/Desktop/Git/TBASS/TBASS")
library(TBASS)
# devtools::install_github("aashen12/TBASS")
# setwd("/Users/andyshen/Desktop/Git/TBASS/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
# devtools::install_github("aashen12/TBASS")
# setwd("/Users/andyshen/Desktop/Git/TBASS/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 5000
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE)
##------ Tue Aug 25 11:54:17 2020 ------##
##------ Tue Aug 25 11:54:30 2020 ------##
roxygen2::roxygenise()
?tbass
roxygen2::roxygenise()
?tbass
roxygen2::roxygenise()
?tbass
roxygen2::roxygenise()
?tbass
roxygen2::roxygenise()
?tbass
roxygen2::roxygenise()
?tbass
rm(list=ls())
# devtools::install_github("aashen12/TBASS")
# setwd("/Users/andyshen/Desktop/Git/TBASS/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 5000
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE)
rm(list=ls())
# devtools::install_github("aashen12/TBASS")
# setwd("/Users/andyshen/Desktop/Git/TBASS/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 10000
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE)
devtools::install_github("aashen12/TBASS")
rm(list=ls())
# devtools::install_github("aashen12/TBASS")
# setwd("/Users/andyshen/Desktop/Git/TBASS/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 10000
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE)
##------ Tue Aug 25 12:00:03 2020 ------##
##------ Tue Aug 25 12:00:38 2020 ------##
##------ Tue Aug 25 12:01:15 2020 ------##
##------ Tue Aug 25 12:01:41 2020 ------##
##------ Tue Aug 25 12:02:07 2020 ------##
##------ Tue Aug 25 12:02:32 2020 ------##
##------ Tue Aug 25 12:02:58 2020 ------##
##------ Tue Aug 25 12:03:26 2020 ------##
##------ Tue Aug 25 12:03:54 2020 ------##
##------ Tue Aug 25 12:04:22 2020 ------##
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(tb$s2[-burn],type="l")
matplot(tb$v[-burn,],type="l")
tail(tb$s2)
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(tb$s2[-burn],type="l")
matplot(sqrt(1/tb$v[seq(burn_final,nmcmc,100),]),type='l')
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(tb$s2[-burn],type="l")
matplot(tb$v[seq(burn_final,nmcmc,100),],type='l')
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(tb$s2[-burn],type="l")
matplot(sqrt(1/tb$v[seq(burn_final,nmcmc,100),]),type='l')
matplot(sqrt(1/tb$v[seq(burn_final,nmcmc,100),]),type='l',
main = expression(paste("Plot of ",V[i])))
X <- tb$X
beta <- tb$b
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(sqrt(tb$s2[-burn]),type="l",main = "Plot of sigma")
matplot(sqrt(1/tb$v[seq(burn_final,nmcmc,100),]),type='l',
main = expression(paste("Plot of ",V[i])))
plot(X %*% b, y, type="l", main="Predicted vs Actual Values")
plot(X %*% beta, y, type="l", main="Predicted vs Actual Values")
plot(X %*% beta, y, main="Predicted vs Actual Values")
X <- tb$X
beta <- tb$b
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(sqrt(tb$s2[-burn]),type="l",main = "Plot of sigma")
matplot(sqrt(1/tb$v[seq(burn_final,nmcmc,100),]),type='l',
main = expression(paste("Plot of ",V[i])))
plot(X %*% beta, y, main="Predicted vs Actual Values")
abbline(0,1,col="blue2")
X <- tb$X
beta <- tb$b
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(sqrt(tb$s2[-burn]),type="l",main = "Plot of sigma")
matplot(sqrt(1/tb$v[seq(burn_final,nmcmc,100),]),type='l',
main = expression(paste("Plot of ",V[i])))
plot(X %*% beta, y, main="Predicted vs Actual Values")
abline(0,1,col="blue2")
plot(X %*% beta, y, col = ind, main="Predicted vs Actual Values")
X <- tb$X
beta <- tb$b
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(sqrt(tb$s2[-burn]),type="l",main = "Plot of sigma")
matplot(sqrt(1/tb$v[seq(burn_final,nmcmc,100),]),type='l',
main = expression(paste("Plot of ",V[i])))
plot(X %*% beta, y, col = col, main="Predicted vs Actual Values")
abline(0,1,col="blue2")
tb$count
rm(list=ls())
# devtools::install_github("aashen12/TBASS")
# setwd("/Users/andyshen/Desktop/Git/TBASS/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 10000
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE)
##------ Tue Aug 25 15:12:28 2020 ------##
##------ Tue Aug 25 15:13:08 2020 ------##
##------ Tue Aug 25 15:13:46 2020 ------##
##------ Tue Aug 25 15:14:18 2020 ------##
##------ Tue Aug 25 15:14:48 2020 ------##
##------ Tue Aug 25 15:15:22 2020 ------##
##------ Tue Aug 25 15:15:55 2020 ------##
##------ Tue Aug 25 15:16:24 2020 ------##
##------ Tue Aug 25 15:16:50 2020 ------##
##------ Tue Aug 25 15:17:14 2020 ------##
X <- tb$X
beta <- tb$b
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(sqrt(tb$s2[-burn]),type="l",main = "Plot of sigma")
matplot(sqrt(1/tb$v[seq(burn_final,nmcmc,100),]),type='l',
main = expression(paste("Plot of ",V[i])))
plot(X %*% beta, y, col = col, main="Predicted vs Actual Values")
abline(0,1,col="blue2")
tb$count
tail(tb$s2)
X <- tb$X
beta <- tb$b
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(sqrt(tb$s2[-burn]),type="l",main = "Plot of sigma")
matplot(sqrt(1/tb$v[seq(burn_final,nmcmc,100),]),type='l',
main = expression(paste("Plot of ",V[i])))
plot(X %*% beta, y, col = col, main="Predicted vs Actual Values")
abline(0,1,col="blue2",lwd=2.5)
roxygen2::roxygenise()
?tbass
