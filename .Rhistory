col <- rep(1,n) # for coloring these points in a later plot
col[ind] <- 2
nmcmc <- 1000 #number of iterations
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE)
##------ Fri Aug 28 15:19:23 2020 ------##
##------ Fri Aug 28 15:19:26 2020 ------##
##------ Fri Aug 28 15:19:30 2020 ------##
##------ Fri Aug 28 15:19:34 2020 ------##
##------ Fri Aug 28 15:19:37 2020 ------##
##------ Fri Aug 28 15:19:41 2020 ------##
##------ Fri Aug 28 15:19:45 2020 ------##
##------ Fri Aug 28 15:19:48 2020 ------##
##------ Fri Aug 28 15:19:52 2020 ------##
##------ Fri Aug 28 15:19:55 2020 ------##
plot(tb$nbasis, type = "l", main = "Trace plot of number of basis functions")
plot(tb$X %*% tb$beta, y, col = col, main="Predicted vs Actual Values")
plot(tb$X %*% tb$b, y, col = col, main="Predicted vs Actual Values")
abline(0,1,col="blue2",lwd=2.5)
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(
sqrt(tb$s2[-burn]),
type = "l",
main = "Plot of sigma"
)
matplot(
sqrt(1/tb$v[seq(burn_final,nmcmc,100),]),
type='l',
main = expression(paste("Plot of ",V[i]))
)
tb$nbasis
n <- 300
x <- seq(0,1,length.out=n)
y <- sin(2 * pi * x^2) * 10 + rnorm(n)
p<-plot(x,y,main=paste0("Figure ",fig," : Univariate Nonlinear Data"))
fig <- fig + 1
generate_spline <- function(tvec, nknot = length(tvec)) {
s <- sample(c(1), nknot, replace = TRUE)
Bmat <- matrix(NA, nknot, length(x))
hs <- Bmat
for(i in 1:nknot) {
for(j in 1:length(x)) {
Bmat[i,j] <- max(s[i] * (x[j] - tvec[i]), 0)
} #creating basis functions
}
mBmat <- t(Bmat)
mod <- lm(y ~ mBmat) #use gibbs to sample coefs in bayes
pred <- predict(mod)
plot(x,y,main=paste0("Figure ",fig," : Univariate Spline Function"))
lines(x, pred, type = "l", lwd = 5, col="blue1")
#list(basis=mBmat)
}
t <- c(0, 0.525, 0.875); p2<-generate_spline(t)
generate_spline <- function(tvec, nknot = length(tvec)) {
s <- sample(c(1), nknot, replace = TRUE)
Bmat <- matrix(NA, nknot, length(x))
hs <- Bmat
for(i in 1:nknot) {
for(j in 1:length(x)) {
Bmat[i,j] <- max(s[i] * (x[j] - tvec[i]), 0)
} #creating basis functions
}
mBmat <- t(Bmat)
mod <- lm(y ~ mBmat) #use gibbs to sample coefs in bayes
pred <- predict(mod)
plot(x,y,main=paste0("Figure ",2," : Univariate Spline Function"))
lines(x, pred, type = "l", lwd = 5, col="blue1")
#list(basis=mBmat)
}
t <- c(0, 0.525, 0.875); p2<-generate_spline(t)
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
comment = "#>"
)
library(TBASS)
# rmarkdown::html_vignette
fig <- 1
n <- 300
x <- seq(0,1,length.out=n)
y <- sin(2 * pi * x^2) * 10 + rnorm(n)
generate_spline <- function(tvec, nknot = length(tvec)) {
s <- sample(c(1), nknot, replace = TRUE)
Bmat <- matrix(NA, nknot, length(x))
hs <- Bmat
for(i in 1:nknot) {
for(j in 1:length(x)) {
Bmat[i,j] <- max(s[i] * (x[j] - tvec[i]), 0)
} #creating basis functions
}
mBmat <- t(Bmat)
mod <- lm(y ~ mBmat) #use gibbs to sample coefs in bayes
pred <- predict(mod)
plot(x,y,main=paste0("Figure ",2," : Univariate Spline Function"))
lines(x, pred, type = "l", lwd = 5, col="blue1")
#list(basis=mBmat)
}
t <- c(0, 0.525, 0.875)
x <- 1:5
x
c(1,3,5)
cumsum(c(1,5,7))
summary(x)
fivenum(x)
tbass
library(TBASS)
tbass
library(TBASS)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(TBASS)
f<-function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma<-1 # noise sd
n<-500 # number of observations
x<-matrix(runif(n*10),n,10) #10 variables, only first 5 matter
y<-rnorm(n,f(x),sigma)
mod<-tbass(x,y)
library(TBASS)
mod<-tbass(x,y)
mod<-tbassC(x,y)
library(TBASS)
roxygen2::roxygenise()
library(TBASS)
library(TBASS)
mod<-tbassC(x,y)
RcppArmadillo::RcppArmadillo.package.skeleton()
RcppArmadillo::RcppArmadillo.package.skeleton("../foobar")
setwd('../')
RcppArmadillo::RcppArmadillo.package.skeleton("foobar")
library(TBASS)
roxygen2::roxygenise()
setwd('TBASS')
roxygen2::roxygenise()
mod<-tbassC(x,y)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
roxygen2::roxygenise()
library(TBASS)
mod<-tbassC(x,y)
TBASS::getdC
TBASS::getdC()
TBASS::getdC(x,1,1,1,y)
devtools::document()
library(TBASS)
mod<-tbassC(x,y)
TBASS:::getdC(
)
TBASS:::getdC(x,1,1,1,y)
compileAttributes("TBASS")
library(Rcpp)
compileAttributes("TBASS")
compileAttributes()
compileAttributes()
devtools::document()
library(TBASS)
compileAttributes()
devtools::document()
library(TBASS)
compileAttributes()
devtools::document()
library(TBASS)
mod<-tbassC(x,y)
ls()
s2
tau2
v
setwd('../')
RcppArmadillo::RcppArmadillo.package.skeleton("demoPkg")
devtools::document()
library(TBASS)
mod<-tbassC(x,y)
f<-function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma<-1 # noise sd
n<-500 # number of observations
x<-matrix(runif(n*10),n,10) #10 variables, only first 5 matter
y<-rnorm(n,f(x),sigma)
library(TBASS)
mod<-tbassC(x,y)
devtools::document()
library(TBASS)
mod<-tbassC(x,y)
plot(mod$X%*%mod$b,y)
library(TBASS)
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 20000
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 2000
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 2000
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 2000
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
library(TBASS)
library(TBASS)
library(TBASS)
TBASS::tbassC
library(TBASS)
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 2000
system.time(tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 2000
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
library(TBASS)
library(TBASS)
devtools::install_github("aashen12/TBASS")
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
library(TBASS)
#devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 2000
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
roxygen2::roxygenize()
?tbassC
library(TBASS)
#devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 2000
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
devtools::install_github("aashen12/TBASS")
library(TBASS)
library(TBASS)
#devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 20000
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
library(TBASS)
#devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 20000
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
#devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 200
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
#devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 200
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
#devtools::install_github("aashen12/TBASS")
library(TBASS)
TBASS::tbassC
library(TBASS)
#devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 200
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
library(TBASS)
library(TBASS)
library(TBASS)
#devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 200
system.time(tb <- tbassC(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
#devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 200
system.time(tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
#devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 200
system.time(tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
plot(tb$nbasis)
#devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 200
system.time(tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
X <- tb$X
beta <- tb$b
burn_final <- nmcmc/10
burn <- 1:burn_final
plot(sqrt(tb$s2[-burn]),type="l",main = "Plot of sigma")
matplot(sqrt(1/tb$v[seq(burn_final,nmcmc,100),]),type='l',
main = expression(paste("Plot of ",V[i])))
plot(X %*% beta, y, col = col, main="Predicted vs Actual Values")
abline(0,1,col="blue2",lwd=2.5)
plot(tb$nbasis,type="l")
library(TBASS)
roxygen2::roxygenize()
roxygen2::roxygenise()
library(TBASS)
roxygen2::roxygenise()
?tbass
#devtools::install_github("aashen12/TBASS")
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2])+20*(x[,3]-.5)^2+10*x[,4]+5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5),n,5) #10 variables, only first 5 matter
y <- rnorm(n,f(x),sigma)
ind<-sample(n,size=10)
y[ind]<-rnorm(5,f(x[ind,]),15)
col<-rep(1,n)
col[ind]<-2
set.seed(12)
nmcmc <- 2000
system.time(tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = F))
library(TBASS)
