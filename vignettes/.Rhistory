library(TBASS)
# rmarkdown::html_vignette
set.seed(12)
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2]) + 20*(x[,3]-.5)^2 + 10*x[,4] + 5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5), nrow = n, ncol = 5)
y <- rnorm(n, mean = f(x), sd = sigma)
ind <- sample(n,size=10) # convert 10 points to outliers
y[ind] <- rnorm(5, f(x[ind,]), 15)
col <- rep(1,n) # for coloring these points in a later plot
col[ind] <- 2
library(BASS)
nmcmc <- 10000
b <- bass(x,y)
library(BASS)
b <- bass(x,y) # automatically runs 10000 nmcmc iterations
plot(b)
plot(b)$s2
bass
str(plot(b))
plot(b)$nbasis
plot(b)$s2
plot(b)$s2
library(BASS)
b <- bass(x,y) # automatically runs 10000 nmcmc iterations
library(BASS)
b <- bass(x,y) # automatically runs 10000 nmcmc iterations
plot(b)$s2
plot(sqrt(b$s2), main = "Figure 7: Gaussian BMARS Sigma")
plot(sqrt(b$s2), type = "l", main = "Figure 7: Gaussian BMARS Sigma")
fig <- fig + 1
library(BASS)
b <- bass(x,y) # automatically runs 10000 nmcmc iterations
p$s2
b$s2
b$nbasis
fig <- fig + 1
plot(b$nbasis, type = "l",
main = paste0("Figure ", fig, ": BASS Basis Function Count"))
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
comment = "# >"
)
library(TBASS)
# rmarkdown::html_vignette
set.seed(12)
n <- 300
x <- seq(0,1,length.out=n)
y <- sin(2 * pi * x^2) * 10 + rnorm(n)
generate_spline <- function(tvec, nknot = length(tvec)) {
s <- sample(c(1), nknot, replace = TRUE)
Bmat <- matrix(NA, nknot, length(x))
hs <- Bmat
for(i in 1:nknot) {
for(j in 1:length(x)) {
Bmat[i,j] <- max(s[i] * (x[j] - tvec[i]), 0)
} #creating basis functions
}
mBmat <- t(Bmat)
mod <- lm(y ~ mBmat) #use gibbs to sample coefs in bayes
pred <- predict(mod)
plot(x,y,main=paste0("Figure ",2," : Univariate Spline Function"))
lines(x, pred, type = "l", lwd = 5, col="blue1")
#list(basis=mBmat)
}
t <- c(0, 0.525, 0.875)
plot(x,y,main=paste0("Figure ",1," : Univariate Nonlinear Data"))
generate_spline(t)
set.seed(12)
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2]) + 20*(x[,3]-.5)^2 + 10*x[,4] + 5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5), nrow = n, ncol = 5)
y <- rnorm(n, mean = f(x), sd = sigma)
ind <- sample(n,size=10) # convert 10 points to outliers
y[ind] <- rnorm(5, f(x[ind,]), 15)
col <- rep(1,n) # for coloring these points in a later plot
col[ind] <- 2
nmcmc <- 15000 #number of iterations
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
comment = "# >"
)
library(TBASS)
# rmarkdown::html_vignette
set.seed(12)
n <- 300
x <- seq(0,1,length.out=n)
y <- sin(2 * pi * x^2) * 10 + rnorm(n)
generate_spline <- function(tvec, nknot = length(tvec)) {
s <- sample(c(1), nknot, replace = TRUE)
Bmat <- matrix(NA, nknot, length(x))
hs <- Bmat
for(i in 1:nknot) {
for(j in 1:length(x)) {
Bmat[i,j] <- max(s[i] * (x[j] - tvec[i]), 0)
} #creating basis functions
}
mBmat <- t(Bmat)
mod <- lm(y ~ mBmat) #use gibbs to sample coefs in bayes
pred <- predict(mod)
plot(x,y,main=paste0("Figure ",2," : Univariate Spline Function"))
lines(x, pred, type = "l", lwd = 5, col="blue1")
#list(basis=mBmat)
}
t <- c(0, 0.525, 0.875)
plot(x,y,main=paste0("Figure ",1," : Univariate Nonlinear Data"))
generate_spline(t)
set.seed(12)
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2]) + 20*(x[,3]-.5)^2 + 10*x[,4] + 5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5), nrow = n, ncol = 5)
y <- rnorm(n, mean = f(x), sd = sigma)
ind <- sample(n,size=10) # convert 10 points to outliers
y[ind] <- rnorm(5, f(x[ind,]), 15)
col <- rep(1,n) # for coloring these points in a later plot
col[ind] <- 2
nmcmc <- 15000 #number of iterations
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
comment = "# >"
)
library(TBASS)
# rmarkdown::html_vignette
set.seed(12)
n <- 300
x <- seq(0,1,length.out=n)
y <- sin(2 * pi * x^2) * 10 + rnorm(n)
generate_spline <- function(tvec, nknot = length(tvec)) {
s <- sample(c(1), nknot, replace = TRUE)
Bmat <- matrix(NA, nknot, length(x))
hs <- Bmat
for(i in 1:nknot) {
for(j in 1:length(x)) {
Bmat[i,j] <- max(s[i] * (x[j] - tvec[i]), 0)
} #creating basis functions
}
mBmat <- t(Bmat)
mod <- lm(y ~ mBmat) #use gibbs to sample coefs in bayes
pred <- predict(mod)
plot(x,y,main=paste0("Figure ",2," : Univariate Spline Function"))
lines(x, pred, type = "l", lwd = 5, col="blue1")
#list(basis=mBmat)
}
t <- c(0, 0.525, 0.875)
plot(x,y,main=paste0("Figure ",1," : Univariate Nonlinear Data"))
generate_spline(t)
set.seed(12)
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2]) + 20*(x[,3]-.5)^2 + 10*x[,4] + 5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5), nrow = n, ncol = 5)
y <- rnorm(n, mean = f(x), sd = sigma)
ind <- sample(n,size=10) # convert 10 points to outliers
y[ind] <- rnorm(5, f(x[ind,]), 15)
col <- rep(1,n) # for coloring the outlier points in a later plot
col[ind] <- 2
nmcmc <- 20000 #number of iterations
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE)
##------ Mon Aug 31 14:01:24 2020 ------##
##------ Mon Aug 31 14:02:41 2020 ------##
##------ Mon Aug 31 14:03:42 2020 ------##
##------ Mon Aug 31 14:04:45 2020 ------##
##------ Mon Aug 31 14:05:54 2020 ------##
##------ Mon Aug 31 14:07:00 2020 ------##
##------ Mon Aug 31 14:07:58 2020 ------##
##------ Mon Aug 31 14:08:52 2020 ------##
##------ Mon Aug 31 14:09:47 2020 ------##
##------ Mon Aug 31 14:10:41 2020 ------##
fig <- 3
plot(tb$nbasis, type = "l",
main = paste0("Figure ", fig, ": Trace plot of number of basis functions"),
xlab = "nmcmc", ylab = "Number of Basis Functions")
fig <- fig + 1
plot(tb$X %*% tb$b, y, col = col,
main=paste0("Figure ", fig, ": Predicted vs Actual Values"),
xlab = "Predicted y-values")
abline(0,1,col="blue2",lwd=2.5)
burn_final <- nmcmc/10
burn <- 1:burn_final
fig <- fig + 1
plot(tb$s2[-burn], type = "l",
main = paste0("Figure ", fig, ": TBASS Variance Trace Plot"),
xlab = "nmcmc", ylab = "variance")
fig <- fig + 1
matplot(sqrt(1/tb$v[seq(burn_final,nmcmc,100),]), type="l",
main = paste0("Figure ",fig, ": TBASS Trace Plot of V_i"),
xlab = "nmcmc", ylab = "V_i")
library(BASS)
b <- bass(x,y) # automatically runs 10000 nmcmc iterations
fig <- fig + 1
plot(b$nbasis, type = "l",
main = paste0("Figure ", fig, ": BASS Basis Function Count"),
xlab = "nmcmc", ylab = "Number of Basis Functions")
fig <- fig + 1
plot(b$s2, type = "l",
main = paste0("Figure ", fig, ": BASS Variance Trace Plot"),
xlab = "nmcmc", ylab = "variance")
b <- bass(x,y,nmcmc = nmcmc) # automatically runs 10000 nmcmc iterations
reticulate::repl_python()
x<-09
sample
sample.int
system.time(chol(crossprod(matrix(runif(3000^2),nrow=3000)))) # ~1 second with blas, ~15 seconds without
install.packages("rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
library(Rcpp)
#>
#> Attaching package: 'Rcpp'
#> The following object is masked from 'package:inline':
#>
#>     registerPlugin
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
# add works like a regular R function
add
#> function (x, y, z)
#> .Call(<pointer: 0x7f96ecb3ef20>, x, y, z)
add(1, 2, 3)
#include <Rcpp.h>
using namespace Rcpp;
// This is a simple example of exporting a C++ function to R. You can
// source this function into an R session using the Rcpp::sourceCpp
// function (or via the Source button on the editor toolbar). Learn
// more about Rcpp at:
//
//   http://www.rcpp.org/
//   http://adv-r.had.co.nz/Rcpp.html
//   http://gallery.rcpp.org/
//
// [[Rcpp::export]]
NumericVector timesTwo(NumericVector x) {
return x * 2;
}
// You can include R code blocks in C++ files processed with sourceCpp
// (useful for testing and development). The R code will be automatically
// run after the compilation.
//
/*** R
timesTwo(42)
View(f)
cppFunction('int cumsumC(NumericVector v){
n = int v.size();
out = NumericVector(n);
out[0] = v[0];
for(int i = 1, i < n, ++i) {
out[i] = out[i-1] + v[i];
}
return out;
}')
cppFunction('int cumsumC(NumericVector v){
int n = int v.size();
NumericVector out(n);
out[0] = v[0];
for(int i = 1, i < n, ++i) {
out[i] = out[i-1] + v[i];
}
return out;
}')
cppFunction('int cumsumC(NumericVector v){
int n = int v.size();
NumericVector out(n);
out[0] = v[0];
for(int i = 1; i < n; ++i) {
out[i] = out[i-1] + v[i];
}
return out;
}')
csR<-function(v){
n<-length(v)
cs<-rep(NA, v)
cs[1]<-v[1]
for(i in 2:n){
cs[i]<-cs[i-1]+v[i]
}
cs
}
cs(1:9)
csR(1:9)
csR<-function(v){
n<-length(v)
cs<-rep(NA, n)
cs[1]<-v[1]
for(i in 2:n){
cs[i]<-cs[i-1]+v[i]
}
cs
}
csR(1:9)
cumsum(1:9)
csR(1:20)
cumsum(1:20)
cppFunction('NumericVector cumsumC(NumericVector v){
int n = int v.size();
NumericVector out(n);
out[0] = v[0];
for(int i = 1; i < n; ++i) {
out[i] = out[i-1] + v[i];
}
return out;
}')
cppFunction('NumericVector cumsumC(NumericVector v){
int n = v.size();
NumericVector out(n);
out[0] = v[0];
for(int i = 1; i < n; ++i) {
out[i] = out[i-1] + v[i];
}
return out;
}')
cumsumC(1:9)
cumsim(1:9)
cumsum(1:9)
cppFunction('NumericVector csC(NumericVector v){
int n = v.size();
NumericVector out(n);
out[0] = v[0];
for(int i = 1; i < n; ++i) {
out[i] = out[i-1] + v[i];
}
return out;
}')
csC(1:12)
csR(1:12)
csR(1:12)==csC(1:12)
all(csR(1:12)==csC(1:12))
all(cumsum(1:12)==csC(1:12))
double f1(NumericVector x) {
int n = x.size();
double y = 0;
double f1(NumericVector x) {
int n = x.size();
double y = 0;
f1(1:4)
double f1(NumericVector x) {
int n = x.size();
double y = 0;
for(int i = 0; i < n; ++i) {
y += x[i] / n;
}
return y;
}
cppFunction('double f1(NumericVector x) {
int n = x.size();
double y = 0;
for(int i = 0; i < n; ++i) {
y += x[i] / n;
}
return y;
}')
f1(1:4)
mean(1:4)
f1(1:10)
vec<=1:20
f1(vec)==mean(vec)
vec<-1:20
f1(vec)==mean(vec)
mean(vec)
f1(vec)
f1(vec);mean(vec)
vec<-1:78
f1(vec);mean(vec)
vec<-9:78
f1(vec);mean(vec)
vec<-2:6
f1(vec);mean(vec)
2/5+3/5+4/5+1+6/5
f1(vec);mean(vec)
%*%
t
t()
t
install.packages('RcppArmadillo')
library(RcppArmadillo)
trans
cppFunction('NumericMatrix solvec(NumericMatrix X) {
return solve(X)
})')
cppFunction('NumericMatrix solvec(NumericMatrix X) {
return arma::solve(X)
})')
cppFunction('NumericMatrix solvec(NumericMatrix X) {
return arma::inv(X)
})')
library(RcppArmadillo)
cppFunction('NumericMatrix solvec(NumericMatrix X) {
return arma::inv(X)
})')
cppFunction('NumericMatrix solvec(NumericMatrix X, Function solve) {
return solve(X)
})')
cppFunction('NumericMatrix solvec(NumericMatrix X, Function solve) {
return solve(X)
}')
cppFunction('NumericMatrix solvec(NumericMatrix X, Function solve) {
return solve(X);
}')
solvec(diag(8))
solvec(diag(8), solve)
m<-matrix(1:9,3,3)
solvec(m,solve)
solve(m)
m
m<-rbind(c(1,5,6),c(2,1,9),c(4,7,3))
solve(m)
solvec(m,solve)
system.time(solve(m))
system.time(solvec(m,solve))
devtools::install_github("aashen12/TBASS")
