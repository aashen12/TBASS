library(TBASS)
# rmarkdown::html_vignette
set.seed(12)
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2]) + 20*(x[,3]-.5)^2 + 10*x[,4] + 5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5), nrow = n, ncol = 5)
y <- rnorm(n, mean = f(x), sd = sigma)
ind <- sample(n,size=10) # convert 10 points to outliers
y[ind] <- rnorm(5, f(x[ind,]), 15)
col <- rep(1,n) # for coloring these points in a later plot
col[ind] <- 2
library(BASS)
nmcmc <- 10000
b <- bass(x,y)
library(BASS)
b <- bass(x,y) # automatically runs 10000 nmcmc iterations
plot(b)
plot(b)$s2
bass
str(plot(b))
plot(b)$nbasis
plot(b)$s2
plot(b)$s2
library(BASS)
b <- bass(x,y) # automatically runs 10000 nmcmc iterations
library(BASS)
b <- bass(x,y) # automatically runs 10000 nmcmc iterations
plot(b)$s2
plot(sqrt(b$s2), main = "Figure 7: Gaussian BMARS Sigma")
plot(sqrt(b$s2), type = "l", main = "Figure 7: Gaussian BMARS Sigma")
fig <- fig + 1
library(BASS)
b <- bass(x,y) # automatically runs 10000 nmcmc iterations
p$s2
b$s2
b$nbasis
fig <- fig + 1
plot(b$nbasis, type = "l",
main = paste0("Figure ", fig, ": BASS Basis Function Count"))
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
comment = "# >"
)
library(TBASS)
# rmarkdown::html_vignette
set.seed(12)
n <- 300
x <- seq(0,1,length.out=n)
y <- sin(2 * pi * x^2) * 10 + rnorm(n)
generate_spline <- function(tvec, nknot = length(tvec)) {
s <- sample(c(1), nknot, replace = TRUE)
Bmat <- matrix(NA, nknot, length(x))
hs <- Bmat
for(i in 1:nknot) {
for(j in 1:length(x)) {
Bmat[i,j] <- max(s[i] * (x[j] - tvec[i]), 0)
} #creating basis functions
}
mBmat <- t(Bmat)
mod <- lm(y ~ mBmat) #use gibbs to sample coefs in bayes
pred <- predict(mod)
plot(x,y,main=paste0("Figure ",2," : Univariate Spline Function"))
lines(x, pred, type = "l", lwd = 5, col="blue1")
#list(basis=mBmat)
}
t <- c(0, 0.525, 0.875)
plot(x,y,main=paste0("Figure ",1," : Univariate Nonlinear Data"))
generate_spline(t)
set.seed(12)
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2]) + 20*(x[,3]-.5)^2 + 10*x[,4] + 5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5), nrow = n, ncol = 5)
y <- rnorm(n, mean = f(x), sd = sigma)
ind <- sample(n,size=10) # convert 10 points to outliers
y[ind] <- rnorm(5, f(x[ind,]), 15)
col <- rep(1,n) # for coloring these points in a later plot
col[ind] <- 2
nmcmc <- 15000 #number of iterations
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = FALSE)
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
comment = "# >"
)
library(TBASS)
# rmarkdown::html_vignette
set.seed(12)
n <- 300
x <- seq(0,1,length.out=n)
y <- sin(2 * pi * x^2) * 10 + rnorm(n)
generate_spline <- function(tvec, nknot = length(tvec)) {
s <- sample(c(1), nknot, replace = TRUE)
Bmat <- matrix(NA, nknot, length(x))
hs <- Bmat
for(i in 1:nknot) {
for(j in 1:length(x)) {
Bmat[i,j] <- max(s[i] * (x[j] - tvec[i]), 0)
} #creating basis functions
}
mBmat <- t(Bmat)
mod <- lm(y ~ mBmat) #use gibbs to sample coefs in bayes
pred <- predict(mod)
plot(x,y,main=paste0("Figure ",2," : Univariate Spline Function"))
lines(x, pred, type = "l", lwd = 5, col="blue1")
#list(basis=mBmat)
}
t <- c(0, 0.525, 0.875)
plot(x,y,main=paste0("Figure ",1," : Univariate Nonlinear Data"))
generate_spline(t)
set.seed(12)
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2]) + 20*(x[,3]-.5)^2 + 10*x[,4] + 5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5), nrow = n, ncol = 5)
y <- rnorm(n, mean = f(x), sd = sigma)
ind <- sample(n,size=10) # convert 10 points to outliers
y[ind] <- rnorm(5, f(x[ind,]), 15)
col <- rep(1,n) # for coloring these points in a later plot
col[ind] <- 2
nmcmc <- 15000 #number of iterations
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
comment = "# >"
)
library(TBASS)
# rmarkdown::html_vignette
set.seed(12)
n <- 300
x <- seq(0,1,length.out=n)
y <- sin(2 * pi * x^2) * 10 + rnorm(n)
generate_spline <- function(tvec, nknot = length(tvec)) {
s <- sample(c(1), nknot, replace = TRUE)
Bmat <- matrix(NA, nknot, length(x))
hs <- Bmat
for(i in 1:nknot) {
for(j in 1:length(x)) {
Bmat[i,j] <- max(s[i] * (x[j] - tvec[i]), 0)
} #creating basis functions
}
mBmat <- t(Bmat)
mod <- lm(y ~ mBmat) #use gibbs to sample coefs in bayes
pred <- predict(mod)
plot(x,y,main=paste0("Figure ",2," : Univariate Spline Function"))
lines(x, pred, type = "l", lwd = 5, col="blue1")
#list(basis=mBmat)
}
t <- c(0, 0.525, 0.875)
plot(x,y,main=paste0("Figure ",1," : Univariate Nonlinear Data"))
generate_spline(t)
set.seed(12)
library(TBASS)
f <- function(x){
10*sin(pi*x[,1]*x[,2]) + 20*(x[,3]-.5)^2 + 10*x[,4] + 5*x[,5]
}
sigma <- 1 # TRUE noise sd
n <- 1000 # number of observations
x <- matrix(runif(n*5), nrow = n, ncol = 5)
y <- rnorm(n, mean = f(x), sd = sigma)
ind <- sample(n,size=10) # convert 10 points to outliers
y[ind] <- rnorm(5, f(x[ind,]), 15)
col <- rep(1,n) # for coloring the outlier points in a later plot
col[ind] <- 2
nmcmc <- 20000 #number of iterations
tb <- tbass(x, y, nu = 10, nmcmc = nmcmc, verbose = TRUE)
##------ Mon Aug 31 14:01:24 2020 ------##
##------ Mon Aug 31 14:02:41 2020 ------##
##------ Mon Aug 31 14:03:42 2020 ------##
##------ Mon Aug 31 14:04:45 2020 ------##
##------ Mon Aug 31 14:05:54 2020 ------##
##------ Mon Aug 31 14:07:00 2020 ------##
##------ Mon Aug 31 14:07:58 2020 ------##
##------ Mon Aug 31 14:08:52 2020 ------##
##------ Mon Aug 31 14:09:47 2020 ------##
##------ Mon Aug 31 14:10:41 2020 ------##
fig <- 3
plot(tb$nbasis, type = "l",
main = paste0("Figure ", fig, ": Trace plot of number of basis functions"),
xlab = "nmcmc", ylab = "Number of Basis Functions")
fig <- fig + 1
plot(tb$X %*% tb$b, y, col = col,
main=paste0("Figure ", fig, ": Predicted vs Actual Values"),
xlab = "Predicted y-values")
abline(0,1,col="blue2",lwd=2.5)
burn_final <- nmcmc/10
burn <- 1:burn_final
fig <- fig + 1
plot(tb$s2[-burn], type = "l",
main = paste0("Figure ", fig, ": TBASS Variance Trace Plot"),
xlab = "nmcmc", ylab = "variance")
fig <- fig + 1
matplot(sqrt(1/tb$v[seq(burn_final,nmcmc,100),]), type="l",
main = paste0("Figure ",fig, ": TBASS Trace Plot of V_i"),
xlab = "nmcmc", ylab = "V_i")
library(BASS)
b <- bass(x,y) # automatically runs 10000 nmcmc iterations
fig <- fig + 1
plot(b$nbasis, type = "l",
main = paste0("Figure ", fig, ": BASS Basis Function Count"),
xlab = "nmcmc", ylab = "Number of Basis Functions")
fig <- fig + 1
plot(b$s2, type = "l",
main = paste0("Figure ", fig, ": BASS Variance Trace Plot"),
xlab = "nmcmc", ylab = "variance")
b <- bass(x,y,nmcmc = nmcmc) # automatically runs 10000 nmcmc iterations
reticulate::repl_python()
